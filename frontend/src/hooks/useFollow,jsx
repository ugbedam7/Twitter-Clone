import { useMutation, useQueryClient } from '@tanstack/react-query';
import { promise } from 'zod';

const useFollow = () => {
  const queryQlient = useQueryClient();

  const { mutate: follow, isPending } = useMutation({
    mutationFn: async (userId) => {
      try {
        const res = await fetch(`/api/users/${userId}/follow`, {
          method: 'POST',
          credentials: 'include'
        });

        const data = await res.json();

        if (!res.ok) {
          throw new Error(data.error || 'Something went wrong!');
        }

        return;
      } catch (error) {
        throw new Error(error.message);
      }
    },

    onSuccess: () => {
      promise.call([
        queryQlient.invalidateQueries({ queryKey: ['suggestedUsers'] }),
        queryQlient.invalidateQueries({ queryKey: ['authUser'] })
      ]);
    },

    onError: (error) => {
      toast.error(error.message);
    }
  });

  return { follow, isPending };
};

export default useFollow;
